% OTROS:
% Boolean para la igualdad de cualquier elemento con otro.
esigual(X, X).

%Programas para manipilar listas
car([C|_], C).
cdr([_|Resto],Resto).
cadr(L, C):-
    cdr(L, L1),
    car(L1, C).
caddr(L, F):-
    cdr(L, L1),
    cdr(L1,L2),
    car(L2,F).
cadddr(L, G):-
    cdr(L, L1),
    cdr(L1,L2),
    cdr(L3,L3),
    car(L3,G). 

% Reversar una lista.
reverse([], []).
reverse([C1|H1], L):-
    reverse(H1, L1),
    append(L1, [C1], L).
    
% Agrgar elementos a lista:
addElemLista(Elemento, Lista, [Elemento|Lista]).

% Agregar elemento a lista, simepre que ya no esté en la lista:
addUnicoElemLista(Elem, LIn, LIn):-
    member(Elem, LIn).
addUnicoElemLista(Elem, LIn, [Elem|LIn]):-
    \+ member(Elem, LIn).

% Agregar elementos de una lista a otra lista, asegurando que no hayan duplicados en la lista final:
agregarSinDuplicado([], ListaInAcc, ListaInAcc).
agregarSinDuplicado([C|Resto], ListaInAcc, ListaOut):- 
    member(C, ListaInAcc),
    agregarSinDuplicado(Resto, ListaInAcc, ListaOut).
   
agregarSinDuplicado([C|Resto], ListaInAcc, ListaOut):-
     \+ member(C, ListaInAcc),
    agregarSinDuplicado(Resto, [C|ListaInAcc], ListaOut).
   

%--------------------------------------------------------------------------------------------------
% P2 / Constructor Options (Capa cosntructora):
option(Code, Msg, CbCode, InFlCodeLink, Keyword, [Code, Msg, CbCode, InFlCodeLink, Keyword]).

% P3 / Constructor - Flows (Capa cosntructora):
makeFlow(Id, Msg, LOps, [Id, Msg, LOps]).
flow(Id, Msg, Options, F):-
    agregarSinDuplicado(Options, [],  LOps),
    makeFlow(Id, Msg, LOps, F).
    
% P4 / Flow - Modificador (Capa Set):
flowAddOption(FlowIn, NewOption, FlowOut):-
    makeFlow(Id, Msg, Options, FlowIn),  
    addElemLista(NewOption, Options, OptionsOut),   
    makeFlow(Id, Msg, OptionsOut, FlowOut).

% P5 / Constructor - Chatbots (Capa cosntructora):
makeCb(CbId, Name, Msg, StartFlowId, Flows, [CbId, Name, Msg, StartFlowId, Flows]).
chatbot(CbId, Name, Msg, StartFlowId, Flows, Cb):-
     agregarSinDuplicado(Flows, [], LFlows),
     makeCb(CbId, Name, Msg, StartFlowId, LFlows, Cb).

% P6 / Chatbot - Modificador (Capa Set):
chatbotAddFlow(ChatbotIn, NewFlow, ChatbotOut):-
    makeCb(CbId, Name, Msg, StartFlowId, Flows, ChatbotIn),
    addElemLista(NewFlow, Flows, FlowsOut),    %Falta verificador de que no se repita la Option
    makeCb(CbId, Name, Msg, StartFlowId, FlowsOut, ChatbotOut).
                        
% P7: Constructor - System (Capa Cosntructora): 
%system incluye: Name, InCbCode, Users, Current_Users, CHist,  LCbs
makeSystem(Name, InCbCode, Users, Current_User, CHist,Chatbots, [Name, InCbCode, Users, Current_User, CHist, Chatbots]).
system(Name, InCbCode, Chatbots, Syst):-
    agregarSinDuplicado(Chatbots, [], LCbs),
    makeSystem(Name, InCbCode, [], "", [], LCbs, Syst).

% P8 / System - Modificador (Capa Set):
systemAddChatbot(SysIn, NewCb, SysOut):-
    makeSystem(Name, InCbCode, Users, Current_User, CHist,Chatbots, SysIn),
    addElemLista(NewCb, Chatbots, ChatbotsOut),    
    makeSystem(Name, InCbCode, Users, Current_User, CHist, ChatbotsOut, SysOut).

% P9 / Add users:
systemAddUser(SysIn, User, SysOut):-
    makeSystem(Name, InCbCode, Users, Current_User, CHist, Chatbots, SysIn),
    addUnicoElemLista(User, Users, UsersOut),
    makeSystem(Name, InCbCode, UsersOut, Current_User, CHist, Chatbots, SysOut).

% P10 /login:
   systemLogin(SysIn, User, SysOut):-
     makeSystem(Name, InCbCode, Users, Current_User, CHist, Chatbots, SysIn),
     member(User, Users),
     esigual(Current_User,""),
     makeSystem(Name, InCbCode, Users, User, CHist, Chatbots, SysOut).

% P11 /logout:
   systemLogout(SysIn, SysOut):-
     makeSystem(Name, InCbCode, Users, Current_User, CHist, Chatbots, SysIn),
     \+ esigual(Current_User,""),
     makeSystem(Name, InCbCode, Users,  "", CHist, Chatbots, SysOut).

% P12
% ----------------------------------------------------------------------------------------------------------------
% Cuenta las interacciones de un usuario en un sistema.
contarInteraciones([], _, 0).
contarInteraciones([[C1|_]|Resto], User, Num):-
    contarInteraciones(Resto, User, N1),
    esigual(C1,User),
    Num is N1+1.
contarInteraciones([[C1|_]|Resto], User, Num):-
    contarInteraciones(Resto, User, N1),
    \+ esigual(C1,User),
    Num is N1. 
%-----------------------------------------------------------------------------------------------------------------
% De la lista de interaciones (CHist), se filtran las correspondientes a User.
filtarPorUser([], _, []).
filtarPorUser([[C1|H1]|Resto], User, [[C1|H1]|L1]):-
    filtarPorUser(Resto, User, L1),
    esigual(C1,User). 
filtarPorUser([[C1|_]|Resto], User, L1):-
    filtarPorUser(Resto, User, L1),
    \+ esigual(C1,User).
%-----------------------------------------------------------------------------------------------------------------
% Determinar el Chatbot y Flujo en ultima interaccion asociados a la ultima opcion.
numCbnumFlUltimaInteraccion(LIn, LOut):-
    reverse(LIn, RevLIn), 
    car(RevLIn, L), 
    reverse(L, RevL), 
    car(RevL, Fl1),
    cdr(RevL, CDRevL),
    car(CDRevL,Cb1), 
    LOut = [Cb1, Fl1].

% De la lista de registros (Chatbot o flujos) filtra en una lista aquellos que cumplen con el Id
encontrarRegistroCbOrFl([], _, []). 
encontrarRegistroCbOrFl([C|Resto], Id, [C|LCb]):-
    encontrarRegistroCbOrFl(Resto, Id, LCb),
    member(Id, C).
encontrarRegistroCbOrFl([C|Resto], Id, LCb):-
    encontrarRegistroCbOrFl(Resto, Id, LCb),
    \+member(Id, C).   

% De la lista de opciones filtra en una lista aquellos que cumplen con la Opcion
encontrarOpcion([], Opcion, []).
encontrarOpcion([C|Resto], Opcion, [C|LOp]):-
    encontrarOpcion(Resto, Opcion, LOp),
    reverse(C, LOp1)
    member(Opcion, C); 
    member(Opcion, LOp1).

% Constructor del registro de una interaccion.
makeInteration(User, L, [User, Fecha, L]):-
    get_time(Fecha).

systemTalkRec(SysIn, _, SysOut):-
    makeSystem(Name, InCbCode, Users, Current_User, CHist, Chatbots, SysIn),
      contarInteraciones(CHist, Current_User, Num), 
      esigual(Num, 0), 
    makeInteration(Current_User, [0,1,0,0,1], I),
      addElemLista(I, CHist, CHistOut),
    makeSystem(Name, InCbCode, Users, Current_User, CHistOut, Chatbots, SysOut).
    
systemTalkRec(SysIn, Op, SysOut):-
    makeSystem(Name, InCbCode, Users, Current_User, CHist, Chatbots, SysIn),
      contarInteraciones(CHist, Current_User, Num), 
      \+ esigual(Num, 0),                                             % El Current_User tiene más de una interaccion.
    filtarPorUser(CHist, Current_User, LstInteaciones_User),     % Se identifica la ultima interaccion
    car(LstInteracciones_User, Ultima_interaccion),                   % Se obtiene la ultima interaccion        
    numCbnumFlUltimaInteraccion(Ultima_interaccion, L1),         % De la ultima interacciones se obtiene el cb y fl generados
      car(L1, IdCb),
      cadr(L1, IdFl),
    encontrarRegistroCbOrFl(Chatbots, IdCb, CbOut), 
      car(CbOut, CbOut1),                                        %Chatbot buscado
      reverse(CbOut1, CbOut2),
      car(CbOut2, LFl),                                          %Del Chaybot de interes se extrae la lista de flujos
    encontrarRegistroCbOrFl(LF1, IdFl, FlOut),
      car(FlOut, FlOut1),
      reverse(FlOut1, FlOut2),
      car(FlOut2, LOp),  
    encontrarOpcion(LOp, Op, OpOut),
      car(OpOut, OpOut1),
      caddr(OpOut1, C1),
      cadddr(LOpOut1,F1),
    makeInteration(Current_User, [C,F,Op,C1,F1], I),
      addElemLista(I, CHist, CHistOut),
    makeSystem(Name, InCbCode, Users, Current_User, CHistOut, Chatbots, SysOut).




