% OTROS:
% Boolean para la igualdad de cualquier elemento con otro.
esigual(X, X).

%Programas para manipilar listas
car([C|_], C).
cdr([_|Resto],Resto).
cadr(L, C):-
    cdr(L, L1),
    car(L1, C).
caddr(L, F):-
    cdr(L, L1),
    cdr(L1,L2),
    car(L2,F).
cadddr(L, G):-
    cdr(L, L1),
    cdr(L1, L2),
    cdr(L2, L3),
    car(L3,G). 

% Cuenta los elementos de una lista
contar_elem([], 0).
contar_elem([_|Resto], N):-
    contar_elem(Resto, NR),
    N is NR + 1.

% Reversar una lista.
reverse([], []).
reverse([C1|H1], L):-
    reverse(H1, L1),
    append(L1, [C1], L).
    
% Agrgar elementos a lista:
addElemLista(Elemento, Lista, [Elemento|Lista]).

% Agregar elemento a lista, simepre que ya no esté en la lista:
addUnicoElemLista(Elem, LIn, LIn):-
    member(Elem, LIn).
addUnicoElemLista(Elem, LIn, [Elem|LIn]):-
    \+ member(Elem, LIn).

% Agregar elementos de una lista a otra lista, asegurando que no hayan duplicados en la lista final:
agregarSinDuplicado([], ListaInAcc, ListaInAcc).
agregarSinDuplicado([C|Resto], ListaInAcc, ListaOut):- 
    member(C, ListaInAcc),
    agregarSinDuplicado(Resto, ListaInAcc, ListaOut).
   
agregarSinDuplicado([C|Resto], ListaInAcc, ListaOut):-
     \+ member(C, ListaInAcc),
    agregarSinDuplicado(Resto, [C|ListaInAcc], ListaOut).
   

%--------------------------------------------------------------------------------------------------
% P2 / Constructor Options (Capa cosntructora):
option(Code, Msg, CbCode, InFlCodeLink, Keyword, [Code, Msg, CbCode, InFlCodeLink, Keyword]).

% P3 / Constructor - Flows (Capa cosntructora):
makeFlow(Id, Msg, LOps, [Id, Msg, LOps]).
flow(Id, Msg, Options, F):-
    agregarSinDuplicado(Options, [],  LOps),
    makeFlow(Id, Msg, LOps, F).
    
% P4 / Flow - Modificador (Capa Set):
flowAddOption(FlowIn, NewOption, FlowOut):-
    makeFlow(Id, Msg, Options, FlowIn),  
    addUnicoElemLista(NewOption, Options, OptionsOut),   
    makeFlow(Id, Msg, OptionsOut, FlowOut).

% P5 / Constructor - Chatbots (Capa cosntructora):
makeCb(CbId, Name, Msg, StartFlowId, Flows, [CbId, Name, Msg, StartFlowId, Flows]).
chatbot(CbId, Name, Msg, StartFlowId, Flows, Cb):-
     agregarSinDuplicado(Flows, [], LFlows),
     makeCb(CbId, Name, Msg, StartFlowId, LFlows, Cb).

% P6 / Chatbot - Modificador (Capa Set):
chatbotAddFlow(ChatbotIn, NewFlow, ChatbotOut):-
    makeCb(CbId, Name, Msg, StartFlowId, Flows, ChatbotIn),
    addUnicoElemLista(NewFlow, Flows, FlowsOut),    %Falta verificador de que no se repita la Option
    makeCb(CbId, Name, Msg, StartFlowId, FlowsOut, ChatbotOut).
                        
% P7: Constructor - System (Capa Cosntructora): 
%system incluye: Name, InCbCode, Users, Current_Users, CHist,  LCbs
makeSystem(Name, InCbCode, Users, Current_User, CHist,Chatbots, [Name, InCbCode, Users, Current_User, CHist, Chatbots]).
system(Name, InCbCode, Chatbots, Syst):-
    agregarSinDuplicado(Chatbots, [], LCbs),
    makeSystem(Name, InCbCode, [], "", [], LCbs, Syst).

% P8 / System - Modificador (Capa Set):
systemAddChatbot(SysIn, NewCb, SysOut):-
    makeSystem(Name, InCbCode, Users, Current_User, CHist,Chatbots, SysIn),
    addUnicoElemLista(NewCb, Chatbots, ChatbotsOut),    
    makeSystem(Name, InCbCode, Users, Current_User, CHist, ChatbotsOut, SysOut).

% P9 / Add users:
systemAddUser(SysIn, User, SysOut):-
    makeSystem(Name, InCbCode, Users, Current_User, CHist, Chatbots, SysIn),
    addUnicoElemLista(User, Users, UsersOut),
    makeSystem(Name, InCbCode, UsersOut, Current_User, CHist, Chatbots, SysOut).

% P10 /login:
   systemLogin(SysIn, User, SysOut):-
     makeSystem(Name, InCbCode, Users, Current_User, CHist, Chatbots, SysIn),
     member(User, Users),
     esigual(Current_User,""),
     makeSystem(Name, InCbCode, Users, User, CHist, Chatbots, SysOut).

   systemLogin(SysIn, User, SysOut):-
     makeSystem(Name, InCbCode, Users, Current_User, CHist, Chatbots, SysIn),
     \+ member(User, Users),
     makeSystem(Name, InCbCode, Users, Current_User, CHist, Chatbots, SysOut).

   systemLogin(SysIn, _, SysOut):-
     makeSystem(Name, InCbCode, Users, Current_User, CHist, Chatbots, SysIn),
     \+  esigual(Current_User,""),
     makeSystem(Name, InCbCode, Users, Current_User, CHist, Chatbots, SysOut).

% P11 /logout:
   systemLogout(SysIn, SysOut):-
     makeSystem(Name, InCbCode, Users, Current_User, CHist, Chatbots, SysIn),
     \+ esigual(Current_User,""),
     makeSystem(Name, InCbCode, Users,  "", CHist, Chatbots, SysOut).

% P12
% ----------------------------------------------------------------------------------------------------------------
% Cuenta las interacciones de un usuario en un sistema.
contarInteraciones([], _, 0).
contarInteraciones([[C1|_]|Resto], User, Num):-
    contarInteraciones(Resto, User, N1),
    esigual(C1,User),
    Num is N1+1.
contarInteraciones([[C1|_]|Resto], User, Num):-
    contarInteraciones(Resto, User, N1),
    \+ esigual(C1,User),
    Num is N1. 
%-----------------------------------------------------------------------------------------------------------------
% De la lista de interaciones (CHist), se filtran las correspondientes a User.
filtarPorUser([], _, []).
filtarPorUser([[C1|H1]|Resto], User, [[C1|H1]|L1]):-
    filtarPorUser(Resto, User, L1),
    esigual(C1,User). 
filtarPorUser([[C1|_]|Resto], User, L1):-
    filtarPorUser(Resto, User, L1),
    \+ esigual(C1,User).
%-----------------------------------------------------------------------------------------------------------------
% Determinar el Chatbot y Flujo en ultima interaccion asociados a la ultima opcion.
numCbnumFlUltimaInteraccion(LIn, LOut):-
    reverse(LIn, RevLIn), 
    car(RevLIn, L), 
    reverse(L, RevL), 
    car(RevL, Fl1),
    cadr(RevL, Cb1),
    LOut = [Cb1, Fl1].
%------------------------------------------------------------------------------------------------------------------
% De la lista de registros (Chatbot o flujos) filtra en una lista aquellos que cumplen con el Id
encontrarRegistroCbOrFl([], _, []). 
encontrarRegistroCbOrFl([C|Resto], Id, [C|LCb]):-
    encontrarRegistroCbOrFl(Resto, Id, LCb),
    car(C,Cprimero),
    esigual(Id,Cprimero).
encontrarRegistroCbOrFl([C|Resto], Id, LCb):-
    encontrarRegistroCbOrFl(Resto, Id, LCb),
    car(C,Cprimero),
    \+ esigual(Id,Cprimero).  
%------------------------------------------------------------------------------------------------------------------
% De la lista de opciones filtra en una lista aquellos que cumplen con la Opcion
encontrarOpcion([], _, []).
encontrarOpcion([[C1|H1]|Resto], Opcion, [[C1|H1]|L1]):-
    encontrarOpcion(Resto, Opcion, L1),
    esigual(C1,Opcion).
encontrarOpcion([[C1|H1]|Resto], Opcion, [[C1|H1]|L1]):-
    encontrarOpcion(Resto, Opcion, L1),
    reverse([C1|H1], CRev),
    car(CRev, Keyword),
    member(Opcion, Keyword).
encontrarOpcion([[C1|H1]|Resto], Opcion, L1):-
   encontrarOpcion(Resto, Opcion, L1),
    reverse([C1|H1], CRev),
    car(CRev, Keyword),
    \+ esigual(C1,Opcion),
    \+ member(Opcion, Keyword).
%------------------------------------------------------------------------------------------------------------------
% Constructor del registro de una interaccion.
makeInteration(User, L, [User, Fecha, L]):-
    get_time(Fecha).

systemTalkRec(SysIn, _, SysOut):-
    makeSystem(Name, InCbCode, Users, Current_User, CHist, Chatbots, SysIn),
      contarInteraciones(CHist, Current_User, Num), 
      esigual(Num, 0), 
    makeInteration(Current_User, [0,1,"hola",0,1], I),
      addElemLista(I, CHist, CHistOut),
    makeSystem(Name, InCbCode, Users, Current_User, CHistOut, Chatbots, SysOut).
    
systemTalkRec(SysIn, Op, SysOut):-
    makeSystem(Name, InCbCode, Users, Current_User, CHist, Chatbots, SysIn),
      contarInteraciones(CHist, Current_User, Num), 
      \+ esigual(Num, 0),                                             % El Current_User tiene más de una interaccion.
    filtarPorUser(CHist, Current_User,LstInteracciones_User),     % Se identifica la ultima interaccion
    car(LstInteracciones_User, Ultima_interaccion),                   % Se obtiene la ultima interaccion        
    numCbnumFlUltimaInteraccion(Ultima_interaccion, L1),         % De la ultima interacciones se obtiene el cb y fl generados
      car(L1, IdCb),
      cadr(L1, IdFl),
    encontrarRegistroCbOrFl(Chatbots, IdCb, CbOut), 
      car(CbOut, CbOut1),                                        %Chatbot buscado
      reverse(CbOut1, CbOut2),
      car(CbOut2, LFl),                                          %Del Chaybot de interes se extrae la lista de flujos
    encontrarRegistroCbOrFl(LFl, IdFl, FlOut),
      car(FlOut, FlOut1),
      reverse(FlOut1, FlOut2),
      car(FlOut2, LOp),  
    encontrarOpcion(LOp, Op, OpOut),
      car(OpOut, OpOut1),
      caddr(OpOut1, C1),
      cadddr(OpOut1,F1),
    makeInteration(Current_User, [IdCb,IdFl,Op,C1,F1], I),
      addElemLista(I, CHist, CHistOut),
    makeSystem(Name, InCbCode, Users, Current_User, CHistOut, Chatbots, SysOut).

% P13
%-------------------------------------------------------------------------------------------------------------------------
% Sacar de una lista de listas, una lista con los segundos elementos de cada lista
listaSegundosElems([], []).
listaSegundosElems([C|Resto], LstOut):-
    listaSegundosElems(Resto, L),
    cadr(C,C2),
    LstOut = [C2|L].

% Imprime los elementos de una lista, en distintas lineas.
imprimir_lista([]).
imprimir_lista([X|Resto]) :- 
    write(X), 
    nl, 
    imprimir_lista(Resto).

% Imprime una interacción de acuerdo a los especificado en el LAB.
imprimirInteracion(Interaccion):-
    car(Interaccion, Fecha),
    cadr(Interaccion, User),
    caddr(Interaccion, Op),
    reverse(Interaccion, IntRev), 
    caddr(IntRev, NomCb),
    cadr(IntRev, NomFl),
    car(IntRev, Opciones),
    reverse(Opciones, Opciones_Ord),
    write(Fecha), write(' - '), write(User), write(': '), write(Op),
    nl,
    write(Fecha), write(' - '), write(NomCb),
    nl,
    write(NomFl),
    nl,
    imprimir_lista(Opciones_Ord).

imprimir_lstInteracciones([]).
imprimir_lstInteracciones([X|Resto]):-
    imprimirInteracion(X),
    nl,
    imprimir_lstInteracciones(Resto).
    
% Toma una interacción de interes en CHist, y la trasforma en una interaccion imprimible
interaccionForPrint(Chatbots, LstIn, LstOut):-                          % List es una interacción
      car(LstIn, User),
      cadr(LstIn, Fecha),                                       % Se extrae la fecha de la interacción
      reverse(LstIn, LstInRev),
      car(LstInRev, LstCbFl),
      caddr(LstCbFl, Op),
    numCbnumFlUltimaInteraccion(LstIn, LstCbFlOp_Out),
      car(LstCbFlOp_Out, C1),
      cadr(LstCbFlOp_Out, Fl1),
    encontrarRegistroCbOrFl(Chatbots, C1, CbOut),               % Se obtiene el chatbot de interes 
      car(CbOut, CbOut1),                                       
      cadr(CbOut1, Nom_Cb),                                     
      reverse(CbOut1, CbOut2),                                  
      car(CbOut2, Lst_Flujos),                                  
    encontrarRegistroCbOrFl(Lst_Flujos, Fl1, FlOut),            % Se obtiene el Flujo de interes
      car(FlOut, FlOut1),                                       
      cadr(FlOut1, Nom_Fl),                                     
      reverse(FlOut1, FlOut2),                                  
      car(FlOut2, Lst_Ops),                                     % Se accede a la lista de opciones de interes
    listaSegundosElems(Lst_Ops, Lst_Ops_Out),
    LstOut = [Fecha, User, Op, Fecha, Nom_Cb, Nom_Fl, Lst_Ops_Out].
 
% Genera una lista de las interacciones asociadas al User
interacciones(SysIn, User, LstInt_UserOut):-
   makeSystem(_, _, _, _, CHist, _, SysIn),
   filtarPorUser(CHist, User, LstInt_UserIn),
   reverse(LstInt_UserIn, LstInt_UserOut).                    % Se ordena temporalmente la lista de interaccione

% Genera una lista imprimible (de acuerdo con los requerimientos del lab) de las interacciones
lstInteraccionesForPrint(Chatbots, [C], [LstOut_Head]):-
    interaccionForPrint(Chatbots, C, LstOut_Head).

lstInteraccionesForPrint(Chatbots, [C|Resto], [LstOut_Head|LstOut_Resto]):-
  lstInteraccionesForPrint(Chatbots, Resto, LstOut_Resto),
    interaccionForPrint(Chatbots, C, LstOut_Head).
    
systemSynthesis(SysIn, User, LStr):-
    makeSystem(_, _, _, _, _, Chatbots, SysIn),
    interacciones(SysIn, User, LstInt_UserOut),
    lstInteraccionesForPrint(Chatbots, LstInt_UserOut, LStr),
    imprimir_lstInteracciones(LStr).
   

% P14
%-------------------------------------------------------------------------------------------------------------------------
% Generador de numeros aleatorios.
generar_numero_aleatorio_en_rango(Min, Max, Numero) :-
    random(Min, Max, Numero).

% Generar un usuario dado un codigo numerico: Crea un usuario en el contexto de lo solicitado en lab
numero_a_string(Numero, Cadena) :-
    number_codes(Numero, ListaDeCodigos),
    string_codes(Cadena, ListaDeCodigos).

concatenar_cadenas(Cadena1, Cadena2, Resultado) :-
    atom_concat(Cadena1, Cadena2, Resultado).

% Se simula una interaccion.
interationSimulated(_, LstIn ,UserSimulado, ISm) :-
      contarInteraciones(LstIn, UserSimulado, Num), 
      esigual(Num, 0), 
      X = [0,1,"hola",0,1],
      makeInteration(UserSimulado, X, ISm).
     
interationSimulated(Chatbots, LstIn, UserSimulado, ISm):-
      contarInteraciones(LstIn, UserSimulado, Num), 
      \+ esigual(Num, 0),                                             % El Current_User tiene más de una interaccion.
    filtarPorUser(LstIn, UserSimulado,LstInteracciones_UserA),         % Se identifica la ultima interaccion
    reverse(LstInteracciones_UserA, LstInteracciones_User),
    car(LstInteracciones_User, Ultima_interaccion),                   % Se obtiene la ultima interaccion        
    numCbnumFlUltimaInteraccion(Ultima_interaccion, L1),              % De la ultima interacciones se obtiene el cb y fl generados
      car(L1, IdCb),
      cadr(L1, IdFl),
    encontrarRegistroCbOrFl(Chatbots, IdCb, CbOut), 
      car(CbOut, CbOut1),                                             % Chatbot buscado
      reverse(CbOut1, CbOut2),
      car(CbOut2, LFl),                                               % Del Chaybot de interes se extrae la lista de flujos
    encontrarRegistroCbOrFl(LFl, IdFl, FlOut),
      car(FlOut, FlOut1),
      reverse(FlOut1, FlOut2),
      car(FlOut2, LOp),  
      contar_elem(LOp, Num_Op),
      generar_numero_aleatorio_en_rango(1, Num_Op, Op),              % Op corresponde a la opcion simulada
    encontrarOpcion(LOp, Op, OpOut),
      car(OpOut, OpOut1),
      caddr(OpOut1, C1),
      cadddr(OpOut1,F1),
      X = [IdCb,IdFl,Op,C1,F1],
      makeInteration(UserSimulado, X, ISm).

% Se genera el systemSimulate
generar_lista(_, _, 0, Lista, Lista).

% Caso recursivo: generar los nuevos elementos usando una función y recursión
generar_lista(Chatbots, UserSimulado, N, ListaParcial, Lista):-
    N > 0,
    interationSimulated(Chatbots, ListaParcial, UserSimulado, Elemento),
    append(ListaParcial, [Elemento], NuevaListaParcial),
    N1 is N - 1,
    generar_lista(Chatbots, UserSimulado, N1, NuevaListaParcial, Lista).

systemSimulate(SIn, Num_Simulaciones, Num_Usuario, SOut):-
    numero_a_string(Num_Usuario, Cadena),
    concatenar_cadenas(Cadena, "user", User),
    makeSystem(Name, InCbCode, Users, Current_User, CHist, Chatbots, SIn),
    generar_lista(Chatbots, User, Num_Simulaciones, [], ListaInteracciones),
    append(ListaInteracciones, CHist, CHistOut),
    makeSystem(Name, InCbCode, Users, Current_User, CHistOut, Chatbots, SOut),
    systemSynthesis(SOut, User, _).
    


